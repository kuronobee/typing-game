/* src/styles.css */
@import "tailwindcss";
/* 全体の背景色を黒に設定 */
html,
body,
#root {
  background-color: #000000;
  color: white;
}

/* BattleStage 背景色を黒に */
.compact-battle-stage,
[class*="flex-[0.45]"],
[class*="flex-[0.4]"] {
  background-color: #000000;
}

/* 背景画像の下にある要素の背景色も黒に */
.absolute.inset-0 {
  background-color: #000000;
}

/* バトルエフェクトのコンテナ背景も黒に */
.w-full.flex.flex-col {
  background-color: #000000;
}

@keyframes hitAnimation {
  0% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  50% {
    transform: translateX(5px);
  }
  75% {
    transform: translateX(-5px);
  }
  100% {
    transform: translateX(0);
  }
}

.animate-hit {
  animation: hitAnimation 0.3s ease-in-out;
}

@keyframes hit {
  0% {
    transform: translateY(0);
    filter: brightness(1);
  }
  50% {
    transform: translateY(10px);
    filter: brightness(5);
  }
  100% {
    transform: translateY(0);
    filter: brightness(1);
  }
}

.animate-phit {
  animation: hit 0.3s ease;
}

/* 炎を吐く */
@keyframes flashRed {
  0% {
    filter: brightness(1) saturate(1);
    transform: translateY(0);
  }
  50% {
    filter: brightness(1.5) sepia(1) saturate(5) hue-rotate(10deg);
    transform: translateY(10px);
  }
  100% {
    filter: brightness(1) saturate(1);
    transform: translateY(0);
  }
}

.animate-fire {
  animation: flashRed 0.3s ease-in-out;
}

/* コンテナに3D効果を付与 */
.target-indicator-container {
  perspective: 500px; /* 立体感の強さ（調整可能） */
}

/* 3D横回転アニメーション */
@keyframes spin3d {
  from {
    transform: rotateY(0deg);
  }
  to {
    transform: rotateY(360deg);
  }
}

/* ターゲットインジケーター（下向き三角形）のスタイル */
.target-indicator {
  width: 0;
  height: 0;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 15px solid yellow;
  transform-origin: center;
  /* transform-style とアニメーションで3D回転 */
  transform-style: preserve-3d;
  animation: spin3d 1s linear infinite;
}

@keyframes damageFloat {
  0% {
    opacity: 1;
    transform: translate(-50%, 0) scale(1);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -10px) scale(1.2);
    text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.8);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, -20px) scale(1);
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
  }
}

.animate-damage-fade {
  animation: damageFloat 1s ease-out forwards;
  font-size: 2rem; /* フォントサイズを大きくする */
  color: #ff3333; /* 鮮やかな赤色 */
  font-weight: bold;
  pointer-events: none;
}

/* html, body {
    height: 100%;
    overflow: hidden;
    overscroll-behavior: none;
  } */

/* styles.css またはグローバルCSS */
.no-scroll {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

@keyframes comboFloat {
  0% {
    opacity: 1;
    transform: translate(-50%, 0);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, -50px);
  }
}
:root {
  --combo-animation-duration: 1s;
}

.animate-combo-fade {
  animation: comboFloat var(--combo-animation-duration) ease-out forwards;
}

/* 画面がフラッシュして揺れるエフェクト */
@keyframes screenFlashShake {
  0% {
    opacity: 1;
    transform: translate(0, 0);
  }
  10% {
    opacity: 0.3;
    transform: translate(-10px, 5px);
  }
  20% {
    opacity: 1;
    transform: translate(10px, -5px);
  }
  30% {
    opacity: 0.3;
    transform: translate(-10px, 5px);
  }
  40% {
    opacity: 1;
    transform: translate(10px, -5px);
  }
  100% {
    opacity: 1;
    transform: translate(0, 0);
  }
}

.screen-flash-shake {
  animation: screenFlashShake 0.5s ease-in-out;
}

@keyframes screenShake {
  0% {
    transform: translate(0, 0);
  }
  10% {
    transform: translate(-5px, 3px);
  }
  20% {
    transform: translate(5px, -3px);
  }
  30% {
    transform: translate(-5px, 3px);
  }
  40% {
    transform: translate(5px, -3px);
  }
  100% {
    transform: translate(0, 0);
  }
}

.screen-shake {
  animation: screenShake 0.5s ease-in-out;
}

/* キーボード表示時のスタイル */
.keyboard-open {
  position: fixed;
  width: 100%;
  height: var(--window-height, 100%);
  overflow: hidden;
}

/* iOS用のオーバースクロール動作を無効化 */
html,
body {
  position: fixed;
  height: 100%;
  overflow: auto;
  width: 100%;
  overscroll-behavior: none;
  -webkit-overflow-scrolling: touch;
}

/* キーボード表示時に高さを調整するためのカスタムプロパティ */
:root {
  --window-height: 100vh;
}

/* バトルインターフェースの入力欄をキーボード表示時にもスクロールさせない */
.input-wrapper {
  position: relative;
  z-index: 1000;
}

/* src/styles.css に追加 - コンパクトモード最適化用CSS */

/* コンパクトモード時のBattleStage最適化 */
.compact-battle-stage {
  /* 余白を最小化 */
  margin: 0;
  padding: 0;

  /* コンテンツをより効率的に表示 */
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background-color: #111111;
}

/* キーボード表示時のQuestion Container最適化 */
.compact-battle-stage .question-container {
  margin-top: 3px;
  margin-bottom: 3px;
  border-width: 1px;
}

/* キーボード表示時のコンボ表示最適化 */
.compact-battle-stage .combo-display {
  font-size: 0.875rem;
  transform: translateY(-5px);
}

/* キーボード表示時のエネミー表示最適化 */
.compact-battle-stage .enemy-container {
  transform-origin: bottom center;
}

/* コンパクトモードでの攻撃ゲージ */
.compact-battle-stage .attack-gauge {
  height: 4px;
  width: 50px;
}

/* コンパクトモード時の余白調整 */
@media (max-height: 600px) {
  .compact-battle-stage {
    /* 非常に小さい画面での追加最適化 */
    transform: scale(0.95);
    transform-origin: center top;
  }
}

/* 敵の体力ゲージ表示を最適化 */
.compact-battle-stage .enemy-health-bar {
  /* 体力ゲージの位置を調整 */
  position: absolute;
  bottom: -8px !important; /* !importantで他のスタイルを上書き */
  left: 50%;
  /*transform: translateX(-50%);*/

  /* サイズと表示を最適化 */
  width: 50px !important;
  height: 8px !important;
  background-color: rgba(200, 200, 200, 0.7) !important;
  border-width: 1px !important;
}

/* 体力ゲージの内部バー */
.compact-battle-stage .enemy-health-bar > div {
  height: 100%;
}

/* コンパクトモード時のBattleStage-BattleInterface間のギャップを確保 */
.keyboard-open .flex-[0.3] {
  padding-bottom: 10px;
}

/* キーボード表示時にBattleInterfaceの上部にスペースを作る */
.keyboard-open .battle-interface-container {
  margin-top: 10px;
}

/* ヘルスゲージのボーダーを調整 */
.enemy-health-bar {
  border: 2px solid rgba(255, 255, 255, 0.5);
}

/* キーボード表示時のみのスタイル */
@media (max-height: 580px) {
  .compact-battle-stage .enemy-container {
    /* 非常に小さい画面でさらに上方に配置 */
    transform: translateY(-15px);
  }
}

/* キーボード表示時のスタイル - 画面ぶれ防止 */
.keyboard-open {
  position: fixed;
  width: 100%;
  height: var(--window-height, 100%);
  overflow: hidden;
  transition: none !important; /* 遷移アニメーションをオフにして画面のぶれを防止 */
}

/* iOS用のオーバースクロール動作を無効化 - 追加対策 */
html,
body {
  position: fixed;
  height: 100%;
  overflow: auto;
  width: 100%;
  overscroll-behavior: none;
  -webkit-overflow-scrolling: touch;
  touch-action: manipulation; /* タッチでのダブルタップズームなどを防止 */
}

/* タップ時の青いハイライトを非表示 */
* {
  -webkit-tap-highlight-color: transparent;
}

/* 入力フィールドタップ時の挙動を安定化 */
input {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: none;
}

/* スキルアニメーション用CSS - styles.css に追加 */

/* 浮き上がるアニメーション（回復など） */
@keyframes floatUp {
  0% {
    opacity: 0;
    transform: translateY(0);
  }
  10% {
    opacity: 1;
  }
  80% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: translateY(-30px);
  }
}

.animate-float-up {
  animation: floatUp 1s ease-out forwards;
}

/* 爆発アニメーション（ダメージスキルなど） */
@keyframes explosion {
  0% {
    opacity: 0;
    transform: scale(0.5);
  }
  10% {
    opacity: 1;
    transform: scale(1.2);
  }
  20% {
    transform: scale(0.9);
  }
  30% {
    transform: scale(1.1);
  }
  50% {
    transform: scale(1);
  }
  80% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: scale(1.3);
  }
}

.animate-explosion {
  animation: explosion 1s ease-out forwards;
}

/* 回転アニメーション（バフ/デバフなど） */
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.animate-rotate {
  animation: rotate 1s linear infinite;
}

/* スキルスロットのクールダウン表示用 */
.cooldown-overlay {
  position: absolute;
  inset: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: white;
}

/* スキルがアクティブ状態のときのハイライト */
.skill-active {
  border: 2px solid #ffc107;
  box-shadow: 0 0 10px rgba(255, 193, 7, 0.5);
}

/* 使用不可能なスキルの表示 */
.skill-disabled {
  opacity: 0.5;
  filter: grayscale(70%);
}

/* スキル効果の光るエフェクト */
@keyframes glowing {
  0% {
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
  }
  50% {
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
  }
  100% {
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
  }
}

.animate-glow {
  animation: glowing 1.5s ease-in-out infinite;
}

/* MP不足警告の点滅エフェクト */
@keyframes mpWarning {
  0% {
    background-color: rgba(220, 38, 38, 0.7);
  }
  50% {
    background-color: rgba(220, 38, 38, 0.4);
  }
  100% {
    background-color: rgba(220, 38, 38, 0.7);
  }
}

.animate-mp-warning {
  animation: mpWarning 1s ease-in-out infinite;
}

/* src/styles.css に追加するパーティクルアニメーション用CSS */

/* パーティクルの動き */
@keyframes particleMove {
  0% {
    transform: translate(0, 0) scale(1);
    opacity: var(--initial-opacity, 0.8);
  }
  50% {
    opacity: var(--initial-opacity, 0.8);
  }
  100% {
    transform: translate(
        calc(var(--direction-x, 1) * var(--distance-x, 60px)),
        calc(var(--direction-y, 1) * var(--distance-y, 60px))
      )
      scale(0);
    opacity: 0;
  }
}

/* スケールインアニメーション（スキル名などの表示用） */
@keyframes scaleIn {
  0% {
    transform: scale(0.5);
    opacity: 0;
  }
  50% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-scale-in {
  animation: scaleIn 0.5s ease-out forwards;
}

/* 回転するエフェクト */
@keyframes spinAndGrow {
  0% {
    transform: rotate(0deg) scale(0.5);
    opacity: 0.5;
  }
  50% {
    transform: rotate(180deg) scale(1.2);
    opacity: 1;
  }
  100% {
    transform: rotate(360deg) scale(0);
    opacity: 0;
  }
}

.animate-spin-and-grow {
  animation: spinAndGrow 1s ease-out forwards;
}

/* 波紋エフェクト */
@keyframes ripple {
  0% {
    transform: scale(0);
    opacity: 1;
  }
  100% {
    transform: scale(3);
    opacity: 0;
  }
}

.animate-ripple {
  animation: ripple 1s ease-out forwards;
}

/* キラキラエフェクト */
@keyframes sparkle {
  0% {
    transform: scale(0) rotate(0deg);
    opacity: 0;
  }
  50% {
    transform: scale(1) rotate(45deg);
    opacity: 1;
  }
  100% {
    transform: scale(0) rotate(90deg);
    opacity: 0;
  }
}

.animate-sparkle {
  animation: sparkle 1s ease-out forwards;
}

/* 四方へ広がるエネルギー */
@keyframes energyBurst {
  0% {
    transform: scale(0.2);
    opacity: 1;
  }
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

.animate-energy-burst {
  animation: energyBurst 0.8s ease-out forwards;
}

/* スキルエフェクト用のオーバーレイ */
.skill-effect-overlay {
  position: absolute;
  inset: 0;
  pointer-events: none;
  z-index: 100;
}

/* バフ/デバフ用の追加アニメーション */

/* 下に落ちるアニメーション（デバフ用） */
@keyframes floatDown {
  0% {
    transform: translateY(0) translateX(-50%);
    opacity: 1;
  }
  100% {
    transform: translateY(30px) translateX(-50%);
    opacity: 0;
  }
}

/* 回復フラッシュ効果 */
.heal-flash {
  animation: healFlash 0.5s;
}

@keyframes healFlash {
  0% {
    filter: brightness(1);
  }
  50% {
    filter: brightness(1.3) hue-rotate(120deg);
  }
  100% {
    filter: brightness(1);
  }
}

/* バフエフェクト用のキラキラ */
@keyframes twinkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.5) rotate(0deg);
  }
  50% {
    opacity: 1;
    transform: scale(1.2) rotate(45deg);
  }
}

.twinkle {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: white;
  clip-path: polygon(
    50% 0%,
    61% 35%,
    98% 35%,
    68% 57%,
    79% 91%,
    50% 70%,
    21% 91%,
    32% 57%,
    2% 35%,
    39% 35%
  );
  animation: twinkle 1s infinite;
}

/* エネルギーオーラエフェクト */
@keyframes energyPulse {
  0% {
    transform: scale(1);
    opacity: 0.7;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.9;
  }
  100% {
    transform: scale(1);
    opacity: 0.7;
  }
}

.energy-aura {
  position: absolute;
  inset: -10px;
  border-radius: 50%;
  filter: blur(10px);
  animation: energyPulse 2s infinite;
}

/* 新しいパーティクルアニメーション */
@keyframes particleFadeout {
  0% {
    opacity: 0.8;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0);
  }
}

.particle {
  position: absolute;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  animation: particleFadeout 1s forwards;
}

/* src/styles.css に追加する火系スキル用アニメーション */

/* 火の玉がパルス状に大きくなるアニメーション */
@keyframes pulseGrow {
  0% {
    transform: scale(0.8);
    opacity: 0.7;
  }
  100% {
    transform: scale(1.2);
    opacity: 1;
  }
}

/* 爆発アニメーション - 中心から広がる */
@keyframes explode {
  0% {
    transform: scale(0.3);
    opacity: 0.9;
  }
  50% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(0.8);
    opacity: 0;
  }
}

/* より激しい爆発アニメーション - 火球スキル用 */
@keyframes fireballExplode {
  0% {
    transform: scale(0.2);
    opacity: 0.8;
    filter: brightness(1.2);
  }
  20% {
    transform: scale(1.5);
    opacity: 1;
    filter: brightness(1.5);
  }
  50% {
    transform: scale(1.1);
    opacity: 0.9;
    filter: brightness(1.3);
  }
  100% {
    transform: scale(0);
    opacity: 0;
    filter: brightness(1);
  }
}

/* 火花が散るアニメーション */
@keyframes particleMove {
  0% {
    transform: translate(0, 0) scale(1);
    opacity: var(--initial-opacity, 0.8);
  }
  100% {
    transform: translate(
        calc(cos(var(--angle)) * var(--distance, 100px)),
        calc(sin(var(--angle)) * var(--distance, 100px))
      )
      scale(0);
    opacity: 0;
  }
}

/* ダメージ数値が浮かび上がるアニメーション */
@keyframes damageFloat {
  0% {
    transform: scale(0.5) translateY(0);
    opacity: 0;
  }
  20% {
    transform: scale(1.3) translateY(-10px);
    opacity: 1;
  }
  80% {
    transform: scale(1) translateY(-30px);
    opacity: 1;
  }
  100% {
    transform: scale(0.8) translateY(-50px);
    opacity: 0;
  }
}

/* フェードインアニメーション */
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* スキル名が輝くアニメーション */
@keyframes glowText {
  0%,
  100% {
    text-shadow: 0 0 5px currentColor;
  }
  50% {
    text-shadow: 0 0 15px currentColor, 0 0 25px currentColor;
  }
}

/* 炎のようにゆらめくアニメーション - 炎系スキルのアイコンや文字に */
@keyframes flicker {
  0%,
  100% {
    filter: brightness(1);
    transform: scale(1) rotate(0deg);
  }
  25% {
    filter: brightness(1.2);
    transform: scale(1.05) rotate(1deg);
  }
  50% {
    filter: brightness(0.9);
    transform: scale(0.95) rotate(-1deg);
  }
  75% {
    filter: brightness(1.1);
    transform: scale(1.02) rotate(0.5deg);
  }
}

.animate-flicker {
  animation: flicker 0.5s ease-in-out infinite;
}

/* 炎系スキル使用時の画面効果 */
.fire-skill-flash {
  animation: fireSkillFlash 0.5s;
}

@keyframes fireSkillFlash {
  0% {
    filter: brightness(1) saturate(1);
  }
  25% {
    filter: brightness(1.2) saturate(1.2) hue-rotate(-10deg);
  }
  100% {
    filter: brightness(1) saturate(1);
  }
}

/* 火の滝のような効果 - 上から下に炎が流れる */
@keyframes fireFall {
  0% {
    transform: translateY(-100%) scale(1);
    opacity: 0.7;
  }
  50% {
    opacity: 0.9;
  }
  100% {
    transform: translateY(100%) scale(0.5);
    opacity: 0;
  }
}

.animate-fire-fall {
  animation: fireFall 1s ease-in forwards;
}

/* 炎に包まれる効果 - 敵にヒットしたときなど */
.fire-aura {
  position: relative;
  overflow: hidden;
}

.fire-aura::after {
  content: "";
  position: absolute;
  inset: -10px;
  background: radial-gradient(
      ellipse at top,
      rgba(255, 69, 0, 0.6),
      transparent 70%
    ),
    radial-gradient(ellipse at bottom, rgba(255, 165, 0, 0.6), transparent 70%);
  animation: fireAura 1.5s ease-in-out infinite;
  pointer-events: none;
  z-index: 10;
}

@keyframes fireAura {
  0%,
  100% {
    opacity: 0.6;
    transform: scale(0.95);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.05);
  }
}

/* src/styles.css に追加するプレイヤーキャラクター関連のスタイル */

/* プレイヤーキャラクター基本スタイル */
.player-character {
  position: absolute;
  bottom: -30px;
  left: 50%;
  transform: translateX(-50%);
  opacity: 0.7;
  transition: all 0.3s ease;
  pointer-events: none;
  z-index: 15;
}

/* HP状態に応じたプレイヤー表示スタイル */
.player-healthy {
  filter: brightness(1.1);
}

.player-damaged {
  filter: brightness(0.9) sepia(0.2);
}

.player-critical {
  filter: grayscale(50%) brightness(0.7);
  animation: player-pulse 1.5s infinite;
}

/* ダメージを受けた時のプレイヤーエフェクト */
.player-hit {
  animation: player-damage-flash 0.5s;
}

@keyframes player-pulse {
  0%,
  100% {
    opacity: 0.7;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes player-damage-flash {
  0% {
    filter: brightness(1);
    transform: translateX(-50%) scale(1);
  }
  50% {
    filter: brightness(2) saturate(1.5);
    transform: translateX(-50%) scale(1.05);
  }
  100% {
    filter: brightness(1);
    transform: translateX(-50%) scale(1);
  }
}

/* 戦闘アクション時のプレイヤーエフェクト */
.player-action {
  animation: player-attack 0.3s;
}

@keyframes player-attack {
  0% {
    transform: translateX(-50%) translateY(0);
  }
  50% {
    transform: translateX(-50%) translateY(-10px);
  }
  100% {
    transform: translateX(-50%) translateY(0);
  }
}

/* HPが低い時の画面エフェクト */
.low-health-overlay {
  position: absolute;
  inset: 0;
  pointer-events: none;
  z-index: 20;
  border-radius: 0.5rem;
  box-shadow: inset 0 0 40px 20px rgba(255, 0, 0, 0.3);
  opacity: 0;
  transition: opacity 0.5s ease;
}

/* src/styles.css に追加するプレイヤーキャラクターアニメーション */

/* プレイヤーがダメージを受けた時のアニメーション */
@keyframes player-damage-flash {
  0% {
    filter: brightness(1);
    transform: translateX(-50%) scale(1);
  }
  50% {
    filter: brightness(2) saturate(1.5);
    transform: translateX(-50%) scale(1.05);
  }
  100% {
    filter: brightness(1);
    transform: translateX(-50%) scale(1);
  }
}

.player-hit {
  animation: player-damage-flash 0.5s ease-in-out;
}

/* プレイヤーがスキルを使用する時のアニメーション */
@keyframes player-skill-cast {
  0% {
    transform: translateX(-50%) translateY(0);
  }
  25% {
    transform: translateX(-50%) translateY(-5px);
  }
  50% {
    transform: translateX(-50%) translateY(0);
  }
  75% {
    transform: translateX(-55%) translateY(0);
  }
  100% {
    transform: translateX(-50%) translateY(0);
  }
}

.player-casting {
  animation: player-skill-cast 0.5s ease-in-out;
}

/* src/styles.css に追加する瀕死状態用のCSS */

/* 瀕死状態の境界線をゆっくりと点滅させるアニメーション */
@keyframes low-health-pulse {
  0% {
    border-color: rgba(220, 38, 38, 0.5); /* red-600 with 50% opacity */
    box-shadow: inset 0 0 5px 2px rgba(220, 38, 38, 0.2);
  }
  50% {
    border-color: rgba(239, 68, 68, 0.8); /* red-500 with 80% opacity */
    box-shadow: inset 0 0 8px 3px rgba(239, 68, 68, 0.4);
  }
  100% {
    border-color: rgba(220, 38, 38, 0.5); /* red-600 with 50% opacity */
    box-shadow: inset 0 0 5px 2px rgba(220, 38, 38, 0.2);
  }
}

.low-health-border {
  animation: low-health-pulse 2s infinite ease-in-out;
  border-width: 2px;
  border-style: solid;
}

/* プレイヤーキャラクターの瀕死状態アニメーション */
@keyframes player-low-health {
  0%,
  100% {
    filter: brightness(0.9) grayscale(20%);
  }
  50% {
    filter: brightness(0.8) grayscale(30%) sepia(0.2);
  }
}

.player-critical {
  animation: player-low-health 3s infinite ease-in-out;
}

/* src/styles.css に追加 - プレイヤー攻撃アニメーション */

@keyframes player-shake {
  0%,
  100% {
    transform: translateX(-50%) rotate(0deg);
  }
  10% {
    transform: translateX(-52%) rotate(-2deg);
  }
  20% {
    transform: translateX(-48%) rotate(2deg);
  }
  30% {
    transform: translateX(-52%) rotate(-2deg);
  }
  40% {
    transform: translateX(-48%) rotate(2deg);
  }
  50% {
    transform: translateX(-51%) rotate(-1deg);
  }
  60% {
    transform: translateX(-49%) rotate(1deg);
  }
  70% {
    transform: translateX(-50.5%) rotate(-0.5deg);
  }
  80% {
    transform: translateX(-49.5%) rotate(0.5deg);
  }
}

.player-shake {
  animation: player-shake 0.6s ease;
}

/* src/styles.css に追加するレスポンシブスタイル */

/* プレイヤーステータスパネル用のスタイル */
.player-status-panel {
  backdrop-filter: blur(2px);
  transition: all 0.3s ease;
}

/* 小さい画面での表示調整 */
@media (max-width: 640px) {
  .player-status-panel {
    min-width: 110px !important;
    padding: 0.5rem !important;
    font-size: 0.875rem !important;
  }

  .player-status-panel .text-xl {
    font-size: 1rem !important;
  }

  .player-status-panel .text-xs {
    font-size: 0.7rem !important;
  }
}

/* 中くらいの画面での表示調整 */
@media (min-width: 641px) and (max-width: 768px) {
  .player-status-panel {
    min-width: 120px !important;
    padding: 0.75rem !important;
  }
}

/* 極端に小さい画面での調整 */
@media (max-width: 360px) {
  .player-status-panel {
    min-width: 90px !important;
    padding: 0.375rem !important;
    top: 20% !important;
    height: 120px !important; /* 高さを少し増やす */
  }

  /* ゲージの高さを小さく */
  .player-status-panel .h-3 {
    height: 0.5rem !important;
  }

  /* トータルEXP表示を小さく */
  .player-status-panel .text-gray-300 {
    font-size: 0.65rem !important;
  }
}

/* 攻撃ゲージが警告閾値に達したときのスタイル */
.attack-gauge-warning {
  /* ゲージの背景色を変更 */
  background-color: rgba(220, 38, 38, 0.3) !important;
  box-shadow: 0 0 4px 1px rgba(239, 68, 68, 0.4);
  height: 2px !important; /* 警告時に少し太くする */
  transition: all 0.2s ease;
}

/* より危険な状態のゲージスタイル */
.attack-gauge-critical {
  background-color: rgba(220, 38, 38, 0.5) !important;
  box-shadow: 0 0 6px 2px rgba(239, 68, 68, 0.6);
  height: 3px !important; /* さらに太くする */
}

/* 警告時のゲージアニメーション */
@keyframes attack-warning-pulse {
  0% {
    opacity: 0.8;
    background-color: rgb(239, 68, 68); /* red-500 */
  }
  50% {
    opacity: 1;
    background-color: rgb(248, 113, 113); /* red-400 */
  }
  100% {
    opacity: 0.8;
    background-color: rgb(239, 68, 68); /* red-500 */
  }
}

.animate-attack-warning {
  animation: attack-warning-pulse 0.5s infinite;
}

/* 攻撃準備完了時の点滅エフェクト */
@keyframes attack-ready-flash {
  0%,
  100% {
    background-color: rgb(220, 38, 38); /* red-600 */
    box-shadow: 0 0 6px 2px rgba(248, 113, 113, 0.6);
  }
  50% {
    background-color: rgb(254, 202, 202); /* red-200 */
    box-shadow: 0 0 10px 3px rgba(248, 113, 113, 0.8);
  }
}

.animate-attack-ready-flash {
  animation: attack-ready-flash 0.3s infinite;
}

/* 警告アイコンのアニメーション */
@keyframes warning-icon-pulse {
  0%,
  100% {
    transform: translateY(0) scale(1);
    opacity: 0.9;
  }
  50% {
    transform: translateY(-2px) scale(1.1);
    opacity: 1;
  }
}

/* コンパクトモード用の調整 */
.compact-battle-stage .attack-gauge-warning {
  height: 3px !important; /* モバイル表示時は少し太めに */
}

.compact-battle-stage .attack-gauge-critical {
  height: 4px !important; /* モバイル表示時はさらに太く */
}

/* src/styles.css に追加 - プレイヤー攻撃アニメーション */

@keyframes player-attack-m {
  0% {
    transform: translateX(-50%) translateY(0) scale(1);
  }
  50% {
    transform: translateX(-50%) translateY(-8px) scale(0.95);
  }
  100% {
    transform: translateX(-50%) translateY(0) scale(1);
  }
}

.player-attack-m {
  animation: player-attack-m 0.5s ease-in-out;
}

/* スキル使用時の追加のエフェクト */
@keyframes player-skill-attack {
  0% {
    transform: translateX(-50%) translateY(0);
    filter: brightness(1);
  }
  25% {
    transform: translateX(-55%) translateY(-10px) rotate(-3deg);
    filter: brightness(1.2);
  }
  50% {
    transform: translateX(-45%) translateY(-15px) rotate(3deg);
    filter: brightness(1.3);
  }
  75% {
    transform: translateX(-48%) translateY(-5px) rotate(1deg);
    filter: brightness(1.1);
  }
  100% {
    transform: translateX(-50%) translateY(0) rotate(0deg);
    filter: brightness(1);
  }
}

.player-skill-attack {
  animation: player-skill-attack 0.7s ease-in-out;
}

/* src/styles.css に追加 - スキル名コールアウトのアニメーション */

.skill-callout {
    position: absolute;
    left: 50%;
    bottom: 100px; /* プレイヤーキャラクターの頭上あたり */
    transform: translateX(-50%);
    width: 100%;
    text-align: center;
  }
  
  @keyframes skill-callout {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    20% {
      opacity: 1;
      transform: translateY(-5px);
    }
    80% {
      opacity: 1;
      transform: translateY(-15px);
    }
    100% {
      opacity: 0;
      transform: translateY(-25px);
    }
  }
  
  .animate-skill-callout {
    animation: skill-callout 1.5s ease-out forwards;
  }
  
  /* スキル名の装飾 */
  .skill-callout span {
    display: inline-block;
    padding: 0.2em 0.6em;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 0.4em;
    box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
    text-shadow: 0 0 5px rgba(255, 215, 0, 0.7);
  }
  
  /* 魔法陣のような円形のエフェクト */
  .skill-callout::before {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 20px;
    background: radial-gradient(ellipse at center, rgba(255, 215, 0, 0.5) 0%, rgba(255, 215, 0, 0) 70%);
    border-radius: 50%;
    z-index: -1;
    opacity: 0.7;
    animation: magic-circle 1.5s ease-out forwards;
  }